name: Build wheel

on:
  workflow_dispatch:
  push:
    branches:
      - cuda-build
  create:
    tags:
      - v*

jobs:
  build:
    permissions: write-all
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: ["3.10"]
        # cuda-version: ["12.4.0"]
        # fix due to missing 12.4.0 in the network
        cuda-version: ["12.5.0"]
        # cuda-version: ["12.4.1"]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup CUDA
        uses: Jimver/cuda-toolkit@v0.2.23
        with:
          cuda: ${{ matrix.cuda-version }}
          method: network
          sub-packages: '["nvcc"]'

      - name: Set CUDA paths
        run: |
          echo "PATH=/usr/local/cuda-12.5/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda-12.5/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install Deps
        # python -m pip install --upgrade pip
        run: |
          python -m pip install torch==2.6.0 wheel ninja build setuptools
          python -m pip install .

      - name: Build the wheel
        env:
          TORCH_CUDA_ARCH_LIST: "7.0;8.0"  # Specify supported GPU architectures
          FORCE_CUDA: 1
        run: python -m build --wheel --outdir dist/

      - run: du -h dist/*
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl

      - name: Log Built Wheels
        run: |
          ls dist
  
      - name: Set wheel name
        run: echo "wheel_name=$(basename dist/*.whl)" >> $GITHUB_ENV
        
      - name: Get the tag version
        id: extract_branch
        run: echo ::set-output name=branch::${GITHUB_REF#refs/tags/}

      - name: Get Release with tag
        id: get_current_release
        uses: joutvhu/get-release@v1
        with:
          tag_name: ${{ steps.extract_branch.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          asset_path: ./dist/${{env.wheel_name}}
          asset_name: ${{env.wheel_name}}
          asset_content_type: application/*
